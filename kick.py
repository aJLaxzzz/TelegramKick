#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π (–∫–∞–Ω–∞–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–∞–π–º–µ—Ä)
- –û–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import asyncio
import time
from telethon import TelegramClient
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsRecent
from telethon.errors import FloodWaitError, UserNotParticipantError, ChatAdminRequiredError
import config

class SimpleBatchKicker:
    def __init__(self):
        self.api_id = config.API_ID
        self.api_hash = config.API_HASH
        self.phone = config.PHONE_NUMBER
        self.channel_username = None
        self.total_to_remove = 0
        self.per_cycle_limit = 200  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
        
    async def get_channel_info(self, client):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            entity = await client.get_entity(self.channel_username)
            return entity
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return None
    
    async def get_recent_participants(self, client, entity, limit):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        participants = []
        offset = 0
        batch_size = 200
        
        print(f"üìã –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {limit} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        while len(participants) < limit:
            try:
                result = await client(GetParticipantsRequest(
                    channel=entity,
                    filter=ChannelParticipantsRecent(),
                    offset=offset,
                    limit=min(batch_size, limit - len(participants)),
                    hash=0
                ))
                
                if not result.users:
                    break
                    
                participants.extend(result.users)
                offset += len(result.users)
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}/{limit}")
                
                if len(result.users) < batch_size:
                    break
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
                break
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
        return participants
    
    async def kick_participants(self, client, entity, participants, cycle_num):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ü–∏–∫–ª {cycle_num})...")
        
        kicked_count = 0
        errors = 0
        skipped = 0
        
        for i, user in enumerate(participants, 1):
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è
                if user.id == (await client.get_me()).id:
                    print(f"‚è≠Ô∏è [{i}/{len(participants)}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è")
                    skipped += 1
                    continue
                
                # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await client.kick_participant(entity, user)
                kicked_count += 1
                print(f"‚úÖ [{i}/{len(participants)}] –£–¥–∞–ª–µ–Ω: {user.first_name or 'Unknown'}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥-–ª–∏–º–∏—Ç–æ–≤
                await asyncio.sleep(0.5)
                
            except FloodWaitError as e:
                print(f"\n‚è≥ –§–ª—É–¥-–ª–∏–º–∏—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∂–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
                await self.flood_wait_countdown(e.seconds)
                
                try:
                    await client.kick_participant(entity, user)
                    kicked_count += 1
                    print(f"‚úÖ [{i}/{len(participants)}] –£–¥–∞–ª–µ–Ω: {user.first_name or 'Unknown'}")
                except Exception as retry_e:
                    print(f"‚ùå [{i}/{len(participants)}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {retry_e}")
                    errors += 1
                    
            except UserNotParticipantError:
                print(f"‚ÑπÔ∏è [{i}/{len(participants)}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫: {user.first_name or 'Unknown'}")
                skipped += 1
                
            except ChatAdminRequiredError:
                print(f"‚ùå [{i}/{len(participants)}] –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {user.first_name or 'Unknown'}")
                errors += 1
                
            except Exception as e:
                print(f"‚ùå [{i}/{len(participants)}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {user.first_name or 'Unknown'}: {e}")
                errors += 1
        
        return kicked_count, errors, skipped
    
    async def flood_wait_countdown(self, seconds):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–ª—è —Ñ–ª—É–¥-–ª–∏–º–∏—Ç–∞"""
        while seconds > 0:
            hours_left = seconds // 3600
            minutes_left = (seconds % 3600) // 60
            seconds_left = seconds % 60
            
            if hours_left > 0:
                print(f"\r‚è≥ –§–ª—É–¥-–ª–∏–º–∏—Ç, –∂–¥–µ–º {hours_left:02d}:{minutes_left:02d}:{seconds_left:02d}", end="", flush=True)
            else:
                print(f"\r‚è≥ –§–ª—É–¥-–ª–∏–º–∏—Ç, –∂–¥–µ–º {minutes_left:02d}:{seconds_left:02d}", end="", flush=True)
            
            await asyncio.sleep(1)
            seconds -= 1
        
        print(f"\r‚úÖ –§–ª—É–¥-–ª–∏–º–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    async def run_cycle(self, client, entity, cycle_num, total_cycles, limit_per_cycle):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª —É–¥–∞–ª–µ–Ω–∏—è"""
        print(f"\nüîÑ –¶–ò–ö–õ {cycle_num}/{total_cycles}")
        print("=" * 30)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await self.get_recent_participants(client, entity, limit_per_cycle)
        
        if not participants:
            print("‚ÑπÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        kicked_count, errors, skipped = await self.kick_participants(client, entity, participants, cycle_num)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ü–∏–∫–ª–∞ {cycle_num}:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {kicked_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
        
        return True
    
    def get_user_input(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–ö–ï–¢–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í")
        print("=" * 60)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel = input("üì∫ –í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel): ").strip()
        if not channel.startswith('@'):
            channel = '@' + channel
        self.channel_username = channel
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        while True:
            try:
                total = input("üìä –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
                self.total_to_remove = int(total)
                if self.total_to_remove <= 0:
                    print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    continue
                break
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        
        # –†–∞—Å—á–µ—Ç —Ü–∏–∫–ª–æ–≤
        total_cycles = (self.total_to_remove + self.per_cycle_limit - 1) // self.per_cycle_limit
        print(f"üìã –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {total_cycles} —Ü–∏–∫–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º {self.per_cycle_limit} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ —Ü–∏–∫–ª)")
        
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        print(f"\nüìã –°–í–û–î–ö–ê –ù–ê–°–¢–†–û–ï–ö:")
        print(f"üì∫ –ö–∞–Ω–∞–ª: {self.channel_username}")
        print(f"üìä –í—Å–µ–≥–æ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {self.total_to_remove} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print(f"üîÑ –¶–∏–∫–ª–æ–≤: {total_cycles}")
        print(f"‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{total_cycles * 2} –º–∏–Ω—É—Ç")
        
        confirm = input("\n–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é? (yes/no): ").strip().lower()
        if confirm != 'yes':
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
        
        return total_cycles
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_cycles = self.get_user_input()
        if not total_cycles:
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = TelegramClient('session', self.api_id, self.api_hash)
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è (–∑–¥–µ—Å—å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –∏ –ø–∞—Ä–æ–ª—å)
            print("\nüîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
            print("=" * 30)
            print("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–∞—Ä–æ–ª—å:")
            await client.start(phone=self.phone)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Telegram")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            entity = await self.get_channel_info(client)
            if not entity:
                return False
            
            print(f"üì∫ –ö–∞–Ω–∞–ª: {entity.title}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª—ã
            successful_cycles = 0
            total_removed = 0
            
            for cycle in range(1, total_cycles + 1):
                try:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–¥–∞–ª—è—Ç—å –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ
                    remaining = self.total_to_remove - total_removed
                    limit_this_cycle = min(self.per_cycle_limit, remaining)
                    
                    success = await self.run_cycle(client, entity, cycle, total_cycles, limit_this_cycle)
                    if success:
                        successful_cycles += 1
                        total_removed += limit_this_cycle
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                    if cycle < total_cycles:
                        print(f"‚è≥ –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º...")
                        await asyncio.sleep(30)
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ {cycle}: {e}")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {successful_cycles}/{total_cycles}")
            print(f"üìä –ü—Ä–∏–º–µ—Ä–Ω–æ —É–¥–∞–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ~{total_removed}")
            
            if successful_cycles == total_cycles:
                print("üéâ –í—Å–µ —Ü–∏–∫–ª—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            elif successful_cycles > 0:
                print(f"‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ {successful_cycles} –∏–∑ {total_cycles} —Ü–∏–∫–ª–æ–≤")
            else:
                print("‚ùå –ù–∏ –æ–¥–∏–Ω —Ü–∏–∫–ª –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            
        finally:
            await client.disconnect()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

def main():
    kicker = SimpleBatchKicker()
    
    try:
        asyncio.run(kicker.run())
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
